# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode
#name: rust

# Note:
# for sccache to work, you'll need to provide the backend connection information
# I opted for an Azure Storage account I set up in the same region as
# the johnterickson Azure Pipelines account.
# In Pipeline Settings, I've set the following:
# SCCACHE_AZURE_CONNECTION_STRING: [secret]
# DOCKER_LAYER_CACHE_ACCOUNT_KEY: [secret]

# Note 2:
# To get sccache working, I had to build it with the Azure feature enabled
# and with openssl statically-linked for Linux.
# Here's the build (with a backpointer to source) of where the bits came from:
# https://dev.azure.com/johnterickson/rust-lang/_build/results?buildId=275

variables:
  # By default schannel checks revocation of certificates unlike some other SSL
  # backends, but we've historically had problems on CI where a revocation
  # server goes down presumably. See #43333 for more info
  CARGO_HTTP_CHECK_REVOKE: false
  
  # for sccache to work
  SCCACHE_AZURE_BLOB_CONTAINER: rust-sccache-1

  # for docker caching
  DOCKER_LAYER_CACHE_STORAGE_ACCOUNT: rustlangtools
  DOCKER_LAYER_CACHE_CONTAINER_NAME: docker

  ProgressPreference: 'SilentlyContinue'

jobs:
  - job: windows
    timeoutInMinutes: 200
    condition: and(succeeded(), eq(variables['BUILD_WINDOWS'],'1'))
    strategy:
      matrix:
        # # 32/64 bit MSVC tests
        # x86_64-msvc:
        #   MSYS_BITS: 64
        #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler
        #   SCRIPT: python x.py test
        #   CI_JOB_NAME: x86_64-msvc
        # i686-msvc-1:
        #   MSYS_BITS: 32
        #   RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc
        #   SCRIPT: make appveyor-subset-1
        #   CI_JOB_NAME: i686-msvc-1
        # i686-msvc-2:
        #   MSYS_BITS: 32
        #   RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc
        #   SCRIPT: make appveyor-subset-2
        #   CI_JOB_NAME: i686-msvc-2
        # # MSVC aux tests
        # x86_64-msvc-aux:
        #   MSYS_BITS: 64
        #   RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1
        #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc
        #   CI_JOB_NAME: x86_64-msvc-aux
        # x86_64-msvc-cargo:
        #   MSYS_BITS: 64
        #   SCRIPT: python x.py test src/tools/cargotest src/tools/cargo
        #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc
        #   VCVARS_BAT: vcvars64.bat
        #   CI_JOB_NAME: x86_64-msvc-cargo
        # # MSVC tools tests
        # x86_64-msvc-tools:
        #   MSYS_BITS: 64
        #   SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows
        #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri
        #   CI_JOB_NAME: x86_64-msvc-tools

        # # 32/64-bit MinGW builds.
        # #
        # # We are using MinGW with posix threads since LLVM does not compile with
        # # the win32 threads version due to missing support for C++'s std::thread.
        # #
        # # Instead of relying on the MinGW version installed on appveryor we download
        # # and install one ourselves so we won't be surprised by changes to appveyor's
        # # build image.
        # #
        # # Finally, note that the downloads below are all in the `rust-lang-ci` S3
        # # bucket, but they cleraly didn't originate there! The downloads originally
        # # came from the mingw-w64 SourceForge download site. Unfortunately
        # # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.
        # i686-mingw-1:
        #   MSYS_BITS: 32
        #   RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu
        #   SCRIPT: make appveyor-subset-1
        #   MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        #   MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
        #   MINGW_DIR: mingw32
        #   CI_JOB_NAME: i686-mingw-1
        # i686-mingw-2:
        #   MSYS_BITS: 32
        #   RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu
        #   SCRIPT: make appveyor-subset-2
        #   MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        #   MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
        #   MINGW_DIR: mingw32
        #   CI_JOB_NAME: i686-mingw-2
        # x86_64-mingw:
        #   MSYS_BITS: 64
        #   SCRIPT: python x.py test
        #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu
        #   MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        #   MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z
        #   MINGW_DIR: mingw64
        #   CI_JOB_NAME: x86_64-mingw

        # # 32/64 bit MSVC and GNU deployment
        # dist-x86_64-msvc:
        #   RUST_CONFIGURE_ARGS: >
        #     --build=x86_64-pc-windows-msvc
        #     --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc
        #     --enable-full-tools
        #     --enable-profiler
        #   SCRIPT: python x.py dist
        #   DIST_REQUIRE_ALL_TOOLS: 1
        #   DEPLOY: 1
        #   CI_JOB_NAME: dist-x86_64-msvc
        # dist-i686-msvc:
        #   RUST_CONFIGURE_ARGS: >
        #     --build=i686-pc-windows-msvc
        #     --target=i586-pc-windows-msvc
        #     --enable-full-tools
        #     --enable-profiler
        #   SCRIPT: python x.py dist
        #   DIST_REQUIRE_ALL_TOOLS: 1
        #   DEPLOY: 1
        #   CI_JOB_NAME: dist-i686-msvc
        # dist-i686-mingw:
        #   MSYS_BITS: 32
        #   RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools
        #   SCRIPT: python x.py dist
        #   MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        #   MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
        #   MINGW_DIR: mingw32
        #   DIST_REQUIRE_ALL_TOOLS: 1
        #   DEPLOY: 1
        #   CI_JOB_NAME: dist-i686-mingw
        dist-x86_64-mingw:
          MSYS_BITS: 64
          SCRIPT: python x.py dist
          RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools
          MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
          MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z
          MINGW_DIR: mingw64
          DIST_REQUIRE_ALL_TOOLS: 1
          DEPLOY: 1
          CI_JOB_NAME: dist-x86_64-mingw

        # # "alternate" deployment, see .travis.yml for more info
        # dist-x86_64-msvc-alt:
        #   MSYS_BITS: 64
        #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler
        #   SCRIPT: python x.py dist
        #   DEPLOY_ALT: 1
        #   CI_JOB_NAME: dist-x86_64-msvc-alt

    steps:
      - script: |
          echo ##vso[task.setvariable variable=SCCACHE_DIR;]$(Agent.BuildDirectory)\sccache\temp\$(Build.BuildId)
          echo ##vso[task.prependpath]$(Agent.BuildDirectory)\sccache
        displayName: Set SCCACHE_DIR and add to path

      - script: |
          sccache --stop-server
        continueOnError: true
        
      - checkout: self
        fetchDepth: 2
        
      - script: |
          set
        displayName: dump env vars

      - script: |
          @echo on
          choco install msys2 --params="/InstallDir:D:\msys64 /NoPath" -y
          set PATH=D:\msys64\usr\bin;%PATH%
          pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar 
          IF "%MINGW_URL%"=="" (
            IF "%MSYS_BITS%"=="32" pacman -S --noconfirm --needed mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-gcc mingw-w64-i686-python2
            IF "%MSYS_BITS%"=="64" pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-python2
          )
          where rev
          rev --help
          where make
        displayName: install msys2

      # If we need to download a custom MinGW, do so here and set the path
      # appropriately.
      #
      # Note that this *also* means that we're not using what is typically
      # /mingw32/bin/python2.7.exe, which is a "correct" python interpreter where
      # /usr/bin/python2.7.exe is not. To ensure we use the right interpreter we
      # move `C:\Python27` ahead in PATH and then also make sure the `python2.7.exe`
      # file exists in there (which it doesn't by default).
      - script: |
          echo ON
          echo curl %MINGW_URL%/%MINGW_ARCHIVE% --output %MINGW_ARCHIVE% -s | bash
          7z x -y %MINGW_ARCHIVE% > nul
          set PATH=%CD%\%MINGW_DIR%\bin;D:\msys64\usr\bin;%PATH%
          echo ##vso[task.setvariable variable=PATH;]%PATH%
        condition: and(succeeded(), ne(variables['MINGW_URL'],''))
        displayName: Download custom MinGW

      # If we're compiling for MSVC then we, like most other distribution builders,
      # switch to clang as the compiler. This'll allow us eventually to enable LTO
      # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think
      # clang has an output mode compatible with MinGW that we need. If it does we
      # should switch to clang for MinGW as well!
      #
      # Note that the LLVM installer is an NSIS installer
      #
      # Original downloaded here came from
      # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe
      - script: |
          echo ON
          powershell -Command "iwr -outf LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe"
          .\LLVM-7.0.0-win64.exe /S /NCRC /D=D:\clang-rust
          set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=D:\clang-rust\bin\clang-cl.exe
          echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS;]%RUST_CONFIGURE_ARGS%
        condition: and(succeeded(), eq(variables['MINGW_URL'],''))
        displayName: Download clang

      # Here we do a pretty heinous thing which is to mangle the MinGW installation
      # we just had above. Currently, as of this writing, we're using MinGW-w64
      # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to
      # be the first version which contains a fix for #40546, builds randomly
      # failing during LLVM due to ar.exe/ranlib.exe failures.
      #
      # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds
      # to contain a regression in gdb (#40184). As a result if we were to use the
      # gdb provided (7.11.1) then we would fail all debuginfo tests.
      #
      # In order to fix spurious failures (pretty high priority) we use 6.3.0. To
      # avoid disabling gdb tests we download an *old* version of gdb, specifically
      # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb
      # with the 6.2.0 gdb to get tests passing.
      #
      # Note that we don't literally overwrite the gdb.exe binary because it appears
      # to just use gdborig.exe, so that's the binary we deal with instead.
      - script: |
          echo ON
          powershell -Command "iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe"
          mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\bin\gdborig.exe
        condition: and(succeeded(), ne(variables['MINGW_URL'],''))
        displayName: Override with 6.3.0 gdb with 6.2.0 gdb
      
      # Otherwise pull in the MinGW installed on appveyor
      - script: |
          echo ON
          echo Find mingw
          set PATH | findstr /i msys
          set PATH | findstr /i mingw
          set PATH=D:\msys64\mingw%MSYS_BITS%\bin;D:\msys64\usr\bin;%PATH%
          echo ##vso[task.setvariable variable=PATH;]%PATH%
        condition: and(succeeded(), eq(variables['MINGW_URL'],''))
        displayName: Add MinGW to path

      - script: |
          echo ON
          copy C:\Python27amd64\python.exe C:\Python27amd64\python2.7.exe
          set PATH=C:\Python27amd64;%PATH%
          echo ##vso[task.setvariable variable=PATH;]%PATH%
        displayName: Prefer the "native" Python as LLVM has trouble building with MSYS sometimes

      - script: |
          echo ON
          echo Use Sccache built with Azure Storage support
          powershell -Command "iwr -outf %Agent_BuildDirectory%\sccache\sccache.exe https://rustlangtools.blob.core.windows.net/public/stable-x86_64-pc-windows-msvc.sccache.exe"

        displayName: Download and install sccache
        continueOnError: true

      # Note that this is originally from the github releases patch of Ninja
      - script: |
          echo ON
          powershell -Command "iwr -outf 2017-03-15-ninja-win.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip"
          7z x 2017-03-15-ninja-win.zip
          set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja
          echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS;]%RUST_CONFIGURE_ARGS%
          REM - set PATH=%PATH%;%CD% -- this already happens above for sccache
        displayName: Download and install ninja

      - script: |
          echo ON
          powershell -Command "iwr -outf 2017-08-22-is.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-08-22-is.exe"
          2017-08-22-is.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-
          set PATH=C:\Program Files (x86)\Inno Setup 5;%PATH%
          echo ##vso[task.setvariable variable=PATH;]%PATH%
        displayName: Install InnoSetup to get `iscc` used to produce installers

      - script: |
          echo ON
          powershell -Command "iwr -outf 2017-05-15-Handle.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip"
          mkdir handle
          7z x -ohandle 2017-05-15-Handle.zip
          set PATH=%PATH%;%CD%\handle
          handle.exe -accepteula -help
          echo ##vso[task.setvariable variable=PATH;]%PATH%
        displayName: Help debug some handle issues on AppVeyor

      - script: |
          echo ON

          echo Emulate for CiEnv
          set CI=true
          set APPVEYOR=True

          REM echo Since we only need rev for a doc-build, just make a fake one as installing
          REM echo msys2 caused more trouble
          REM echo https://github.com/johnterickson/rust/issues/5
          REM copy /y %WINDIR%\system32\PING.EXE rev.exe
          REM other doc-builds require a working rev
          REM https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/libstd/process.rs line 1056

          REM echo force the specific VS version https://github.com/johnterickson/rust/issues/8
          IF "%VCVARS_BAT%" NEQ "" ( 
            CALL "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\%VCVARS_BAT%"
          )

          echo Check enviornment
          set PATH
          set RUST_CONFIGURE_ARGS
          where sccache
          where rev
          set | findstr /v SCCACHE_AZURE_CONNECTION_STRING

          REM echo temporary hack until we get more space
          REM echo THIS WILL PROBABLY MAKE THINGS SLOW
          REM mkdir c:\MORE_SPACE
          REM mklink /J build c:\MORE_SPACE

          if not exist D:\cache\rustsrc\NUL mkdir D:\cache\rustsrc
          sh src/ci/init_repo.sh . /d/cache/rustsrc
          set SRC=.
          set NO_CCACHE=1

          echo if this fails, it may have been because of a full disk.
          echo dump the drive to see what's taking up space
          sh src/ci/run.sh
          set RESULT=%ERRORLEVEL%
          if NOT "%RESULT%"=="0" dir /s d:\
          exit /b %RESULT%
        displayName: test_script
        env:
          # explicitly decrypt secret variables
          # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch
          SCCACHE_AZURE_CONNECTION_STRING: $(SCCACHE_AZURE_CONNECTION_STRING)

