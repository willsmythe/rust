#
# Azure Pipelines "auto" branch build for Rust on Linux, macOS, and Windows.
# 
# Notes:
# To get sccache working, I (John Erickson) had to build it with the Azure feature enabled
# and with openssl statically-linked for Linux.
# Here's the build (with a backpointer to source) of where the bits came from:
# https://dev.azure.com/johnterickson/rust-lang/_build/results?buildId=275

pr: none
trigger:
- auto

variables:
- group: caching

jobs:
- job: Windows
  timeoutInMinutes: 600
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: steps/windows.yml
  strategy:
    matrix:
      # 32/64 bit MSVC tests
      x86_64-msvc:
        MSYS_BITS: 64
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler
        SCRIPT: python x.py test
      i686-msvc-1:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc
        SCRIPT: make appveyor-subset-1
      i686-msvc-2:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc
        SCRIPT: make appveyor-subset-2
      # MSVC aux tests
      x86_64-msvc-aux:
        MSYS_BITS: 64
        RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc
      x86_64-msvc-cargo:
        MSYS_BITS: 64
        SCRIPT: python x.py test src/tools/cargotest src/tools/cargo
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc
        VCVARS_BAT: vcvars64.bat
      # MSVC tools tests
      x86_64-msvc-tools:
        MSYS_BITS: 64
        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri

      # 32/64-bit MinGW builds.
      #
      # We are using MinGW with posix threads since LLVM does not compile with
      # the win32 threads version due to missing support for C++'s std::thread.
      #
      # Instead of relying on the MinGW version installed on appveryor we download
      # and install one ourselves so we won't be surprised by changes to appveyor's
      # build image.
      #
      # Finally, note that the downloads below are all in the `rust-lang-ci` S3
      # bucket, but they cleraly didn't originate there! The downloads originally
      # came from the mingw-w64 SourceForge download site. Unfortunately
      # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.
      i686-mingw-1:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu
        SCRIPT: make appveyor-subset-1
        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
        MINGW_DIR: mingw32
      i686-mingw-2:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu
        SCRIPT: make appveyor-subset-2
        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
        MINGW_DIR: mingw32
      x86_64-mingw:
        MSYS_BITS: 64
        SCRIPT: python x.py test
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu
        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z
        MINGW_DIR: mingw64

      # 32/64 bit MSVC and GNU deployment
      dist-x86_64-msvc:
        RUST_CONFIGURE_ARGS: >
          --build=x86_64-pc-windows-msvc
          --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc
          --enable-full-tools
          --enable-profiler
        SCRIPT: python x.py dist
        DIST_REQUIRE_ALL_TOOLS: 1
        DEPLOY: 1
      dist-i686-msvc:
        RUST_CONFIGURE_ARGS: >
          --build=i686-pc-windows-msvc
          --target=i586-pc-windows-msvc
          --enable-full-tools
          --enable-profiler
        SCRIPT: python x.py dist
        DIST_REQUIRE_ALL_TOOLS: 1
        DEPLOY: 1
      dist-i686-mingw:
        MSYS_BITS: 32
        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools
        SCRIPT: python x.py dist
        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z
        MINGW_DIR: mingw32
        DIST_REQUIRE_ALL_TOOLS: 1
        DEPLOY: 1
      dist-x86_64-mingw:
        MSYS_BITS: 64
        SCRIPT: python x.py dist
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools
        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror
        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z
        MINGW_DIR: mingw64
        DIST_REQUIRE_ALL_TOOLS: 1
        DEPLOY: 1

      # "alternate" deployment, see .travis.yml for more info
      dist-x86_64-msvc-alt:
        MSYS_BITS: 64
        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler
        SCRIPT: python x.py dist
        DEPLOY_ALT: 1
