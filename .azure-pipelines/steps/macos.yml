steps:
  - template: .azure-pipelines-linux.yml

  - script: |
      sudo apt install gdb
    displayName: install gdb
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
  
  - script: |
      pip install --user awscli
      export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/
      mkdir -p $HOME/rustsrc
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    displayName:  before_install

  # FIXME(#46924): these two commands are required to enable IPv6,
  # they shouldn't exist, please revert once more official solutions appeared.
  # see https://github.com/travis-ci/travis-ci/issues/8891#issuecomment-353403729
  - script: |
      echo '{"ipv6":true,"fixed-cidr-v6":"fd9a:8454:6789:13f7::/64"}' | sudo tee /etc/docker/daemon.json
      sudo service docker restart
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Enable IPv6
    
  - script: |
      curl -fo $HOME/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl
      chmod +x $HOME/stamp
      export PATH=$PATH:$HOME
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: install linux
  - script: |
      brew update
      brew install xz
      brew install swig
    condition: and(succeeded(), and(eq(variables['Agent.OS'],'Darwin'), eq(variables['RUST_CHECK_TARGET'],'dist')))
    displayName: install osx - brew install xz and swig
  - script: |
      echo Use sccache built with Azure Storage support
      curl -fo /usr/local/bin/sccache https://rustlangtools.blob.core.windows.net/public/stable-x86_64-apple-darwin.sccache
      chmod +x /usr/local/bin/sccache
      curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin
      chmod +x /usr/local/bin/stamp
      curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf - 
      export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang
      echo "##vso[task.setvariable variable=CC;]$CC"
      export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++
      echo "##vso[task.setvariable variable=CXX;]$CXX"
      export AR=ar
      echo "##vso[task.setvariable variable=AR;]$AR"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Darwin'))
    displayName: install osx
  
  - script: |
      echo "#### Disk usage before running script:"
      df -h
      du . | sort -nr | head -n100
    displayName: check disk usage

  - script: |
      set -x
      export RUN_SCRIPT="$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/run.sh && sccache --show-stats"
      echo "$RUN_SCRIPT"
      echo "##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT"
      echo "##vso[task.setvariable variable=TRAVIS_OS_NAME;]osx"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Darwin'))
    displayName: prepare run script for osx

  - script: |
      set -x
      [ -z "$IMAGE" ] && export IMAGE=$SYSTEM_JOBDISPLAYNAME
      export RUN_SCRIPT="$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/docker/run.sh $IMAGE"
      echo "$RUN_SCRIPT"
      echo "##vso[task.setvariable variable=IMAGE]$IMAGE"
      echo "##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT"
      echo "##vso[task.setvariable variable=TRAVIS_OS_NAME;]linux"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: prepare run script for linux
  
  - script: |
      sudo sh -c 'echo "/checkout/obj/cores/core.%p.%E" > /proc/sys/kernel/core_pattern'
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Enable core dump on Linux

  - script: |
      git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git
      cd rust-toolstate
      python2.7 "$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py" "$(git rev-parse HEAD)" "$(git log --format=%s -n1 HEAD)" "" ""
      cd ..
      rm -rf rust-toolstate
    condition: and(succeeded(), eq(variables['IMAGE'],'mingw-check'))
    displayName: verify the publish_toolstate script works

  # Log time information from this machine and an external machine for insight into possible
  # clock drift. Timezones don't matter since relative deltas give all the necessary info.
  - script: |
      date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
    displayName: check for clock skew before

  - script: |
      echo RUN_SCRIPT="$RUN_SCRIPT"
      export RUN_SCRIPT="${RUN_SCRIPT//\'}"
      echo RUN_SCRIPT="$RUN_SCRIPT"

      echo TRAVIS_OS_NAME="$TRAVIS_OS_NAME"
      export TRAVIS_OS_NAME="${TRAVIS_OS_NAME//\'}"
      echo TRAVIS_OS_NAME="$TRAVIS_OS_NAME"

      echo IMAGE="$IMAGE"
      export IMAGE="${IMAGE//\'}"
      echo IMAGE="$IMAGE"

      echo Emulate for CiEnv
      export CI="true"
      export TRAVIS="true"
      export CI_JOB_NAME="$SYSTEM_JOBDISPLAYNAME"

      export SCCACHE_AZURE_CONNECTION_STRING=$rustlangtools_CONNECTION_STRING
      export DOCKER_LAYER_CACHE_ACCOUNT_KEY=$rustlangtools_ACCOUNT_KEY

      if [ "$DISABLE_SCCACHE" == "1" ]; then unset SCCACHE_AZURE_CONNECTION_STRING; fi

      printenv | sort | grep -v SCCACHE_AZURE_CONNECTION_STRING
      printenv | sort | grep -v DOCKER_LAYER_CACHE_ACCOUNT_KEY
      which sccache
      stamp sh -x -c "$RUN_SCRIPT"
    displayName: run script
    env:
      # explicitly decrypt secret variables
      # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch
      rustlangtools_CONNECTION_STRING: $(rustlangtools_CONNECTION_STRING)
      rustlangtools_ACCOUNT_KEY: $(rustlangtools_ACCOUNT_KEY)

  - script: |
      date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
    displayName: check for clock skew after
